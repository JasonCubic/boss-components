/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface BossCollapse {
      'collapse': (passedConfig: any) => void;
    }
  }

  interface HTMLBossCollapseElement extends StencilComponents.BossCollapse, HTMLStencilElement {}

  var HTMLBossCollapseElement: {
    prototype: HTMLBossCollapseElement;
    new (): HTMLBossCollapseElement;
  };
  interface HTMLElementTagNameMap {
    'boss-collapse': HTMLBossCollapseElement;
  }
  interface ElementTagNameMap {
    'boss-collapse': HTMLBossCollapseElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'boss-collapse': JSXElements.BossCollapseAttributes;
    }
  }
  namespace JSXElements {
    export interface BossCollapseAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface BossDropdown {
      'boundary': any;
      'display': string;
      'flip': boolean;
      'hideDropdown': () => void;
      'keepOpen': boolean;
      'offset': any;
      'reference': any;
      'setDropdownVisibility': (toShow: any) => void;
      'show': boolean;
      'showDropdown': () => void;
      'toggle': () => void;
      'update': () => void;
    }
  }

  interface HTMLBossDropdownElement extends StencilComponents.BossDropdown, HTMLStencilElement {}

  var HTMLBossDropdownElement: {
    prototype: HTMLBossDropdownElement;
    new (): HTMLBossDropdownElement;
  };
  interface HTMLElementTagNameMap {
    'boss-dropdown': HTMLBossDropdownElement;
  }
  interface ElementTagNameMap {
    'boss-dropdown': HTMLBossDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'boss-dropdown': JSXElements.BossDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface BossDropdownAttributes extends HTMLAttributes {
      'boundary'?: any;
      'display'?: string;
      'flip'?: boolean;
      'keepOpen'?: boolean;
      'offset'?: any;
      'onHiddenBossDropdown'?: (event: CustomEvent) => void;
      'onHideBossDropdown'?: (event: CustomEvent) => void;
      'onShowBossDropdown'?: (event: CustomEvent) => void;
      'onShownBossDropdown'?: (event: CustomEvent) => void;
      'reference'?: any;
      'show'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BossModal {

    }
  }

  interface HTMLBossModalElement extends StencilComponents.BossModal, HTMLStencilElement {}

  var HTMLBossModalElement: {
    prototype: HTMLBossModalElement;
    new (): HTMLBossModalElement;
  };
  interface HTMLElementTagNameMap {
    'boss-modal': HTMLBossModalElement;
  }
  interface ElementTagNameMap {
    'boss-modal': HTMLBossModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'boss-modal': JSXElements.BossModalAttributes;
    }
  }
  namespace JSXElements {
    export interface BossModalAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;
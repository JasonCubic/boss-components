/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface BsButton {
      'removeFocus': () => void;
      'toggle': (selector: any) => void;
    }

    interface BsCollapse {
      'collapse': (passedConfig: any) => void;
      'hiddenEventName': string;
      'hideEventName': string;
      'showEventName': string;
      'shownEventName': string;
    }

    interface BsDropdown {
      'boundary': any;
      'display': string;
      'flip': boolean;
      'hiddenEventName': string;
      'hideDropdown': () => void;
      'hideEventName': string;
      'keepOpen': boolean;
      'offset': any;
      'reference': any;
      'setDropdownVisibility': (toShow: any) => void;
      'show': boolean;
      'showDropdown': () => void;
      'showEventName': string;
      'shownEventName': string;
      'toggle': () => void;
      'update': () => void;
    }

    interface BsModal {
      'hiddenEventName': string;
      'hideEventName': string;
      'modal': (modalOptions?: {}) => void;
      'modalToggleButtonClicked': (relatedTarget?: {}) => void;
      'showEventName': string;
      'shownEventName': string;
    }
  }


    interface HTMLBsButtonElement extends StencilComponents.BsButton, HTMLStencilElement {}

    var HTMLBsButtonElement: {
      prototype: HTMLBsButtonElement;
      new (): HTMLBsButtonElement;
    };
    

    interface HTMLBsCollapseElement extends StencilComponents.BsCollapse, HTMLStencilElement {}

    var HTMLBsCollapseElement: {
      prototype: HTMLBsCollapseElement;
      new (): HTMLBsCollapseElement;
    };
    

    interface HTMLBsDropdownElement extends StencilComponents.BsDropdown, HTMLStencilElement {}

    var HTMLBsDropdownElement: {
      prototype: HTMLBsDropdownElement;
      new (): HTMLBsDropdownElement;
    };
    

    interface HTMLBsModalElement extends StencilComponents.BsModal, HTMLStencilElement {}

    var HTMLBsModalElement: {
      prototype: HTMLBsModalElement;
      new (): HTMLBsModalElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'bs-button': JSXElements.BsButtonAttributes;
    'bs-collapse': JSXElements.BsCollapseAttributes;
    'bs-dropdown': JSXElements.BsDropdownAttributes;
    'bs-modal': JSXElements.BsModalAttributes;
    }
  }

  namespace JSXElements {

    export interface BsButtonAttributes extends HTMLAttributes {

    }

    export interface BsCollapseAttributes extends HTMLAttributes {
      'hiddenEventName'?: string;
      'hideEventName'?: string;
      'showEventName'?: string;
      'shownEventName'?: string;
    }

    export interface BsDropdownAttributes extends HTMLAttributes {
      'boundary'?: any;
      'display'?: string;
      'flip'?: boolean;
      'hiddenEventName'?: string;
      'hideEventName'?: string;
      'keepOpen'?: boolean;
      'offset'?: any;
      'reference'?: any;
      'show'?: boolean;
      'showEventName'?: string;
      'shownEventName'?: string;
    }

    export interface BsModalAttributes extends HTMLAttributes {
      'hiddenEventName'?: string;
      'hideEventName'?: string;
      'showEventName'?: string;
      'shownEventName'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'bs-button': HTMLBsButtonElement
    'bs-collapse': HTMLBsCollapseElement
    'bs-dropdown': HTMLBsDropdownElement
    'bs-modal': HTMLBsModalElement
  }

  interface ElementTagNameMap {
    'bs-button': HTMLBsButtonElement;
    'bs-collapse': HTMLBsCollapseElement;
    'bs-dropdown': HTMLBsDropdownElement;
    'bs-modal': HTMLBsModalElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;